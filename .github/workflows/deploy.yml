name: Deploy to AWS EC2

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:  # Allow manual triggering

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
  APPLICATION_NAME: youtube
  TIMESTAMP: ${{ format('{0:yyyyMMdd-HHmmss}', github.event.repository.pushed_at) }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Set up Java
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      # 3. Grant execute permission for gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 4. Build the application
      - name: Build with Gradle
        run: |
          ./gradlew clean build -x test

      # 5. Run tests (optional, can be uncommented if needed)
      # - name: Run Tests
      #   run: ./gradlew test

      # 6. Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 7. Get commit hash for versioning
      - name: Get commit hash
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      # 8. Upload artifact to S3 with versioning
      - name: Upload JAR to S3
        run: |
          # Version name with timestamp and commit hash for proper tracking
          VERSION_NAME="${{ env.APPLICATION_NAME }}-${{ env.TIMESTAMP }}-${{ steps.vars.outputs.sha_short }}.jar"
          
          # Upload versioned JAR
          aws s3 cp build/libs/${{ env.APPLICATION_NAME }}-0.0.1-SNAPSHOT.jar \
            s3://${{ env.S3_BUCKET_NAME }}/versions/$VERSION_NAME
          
          # Also upload as latest for convenience (optional)
          aws s3 cp build/libs/${{ env.APPLICATION_NAME }}-0.0.1-SNAPSHOT.jar \
            s3://${{ env.S3_BUCKET_NAME }}/${{ env.APPLICATION_NAME }}-latest.jar
          
          # Store version name for deployment
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV

      # 9. Deploy to EC2 via SSH - Using systemd service for consistency
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        env:
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          VERSION_NAME: ${{ env.VERSION_NAME }}
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          envs: S3_BUCKET_NAME,AWS_REGION,VERSION_NAME
          script: |
            # Create application directory if not exists
            mkdir -p /home/ubuntu/app
            cd /home/ubuntu/app
            
            # Download versioned JAR from S3
            echo "Downloading application JAR from S3..."
            aws s3 cp s3://$S3_BUCKET_NAME/versions/$VERSION_NAME application.jar
            
            # Set correct permissions
            sudo chown ubuntu:ubuntu application.jar
            
            # Create/update systemd service file if it doesn't exist
            if [ ! -f /etc/systemd/system/spring-app.service ]; then
              echo "Creating systemd service file..."
              sudo bash -c 'cat > /etc/systemd/system/spring-app.service << EOF
  [Unit]
  Description=Spring Boot Application
  After=network.target
  
  [Service]
  User=ubuntu
  WorkingDirectory=/home/ubuntu/app
  ExecStart=/usr/bin/java -jar /home/ubuntu/app/application.jar \
  --spring.profiles.active=aws \
  --spring.datasource.url=jdbc:mariadb://${{ secrets.DB_HOST }}:${{ secrets.DB_PORT }}/${{ secrets.DB_NAME }} \
  --spring.datasource.username=${{ secrets.DB_USERNAME }} \
  --spring.datasource.password=${{ secrets.DB_PASSWORD }} \
  --cloud.aws.s3.bucket=$S3_BUCKET_NAME \
  --cloud.aws.credentials.access-key=${{ secrets.AWS_ACCESS_KEY_ID }} \
  --cloud.aws.credentials.secret-key=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
  --cloud.aws.region.static=$AWS_REGION \
  --file.upload.uri=http://${S3_BUCKET_NAME}.s3.${AWS_REGION}.amazonaws.com/upload
  SuccessExitStatus=143
  TimeoutStopSec=10
  Restart=on-failure
  RestartSec=5
  
  [Install]
  WantedBy=multi-user.target
  EOF'
  fi
  
  # Reload systemd to apply changes
  sudo systemctl daemon-reload
  
  # Stop, start and enable the service
  sudo systemctl stop spring-app || true
  sudo systemctl start spring-app
  sudo systemctl enable spring-app
  
  # Check status to verify deployment
  sudo systemctl status spring-app --no-pager

# Log deployment version for tracking
echo "Deployed version: $VERSION_NAME" >> /home/ubuntu/app/deployment-history.log
  echo "Deployment completed successfully!"

# 10. Optional: Slack or other notification
# - name: Notify Slack on Deployment
#   uses: 8398a7/action-slack@v3
#   with:
#     status: ${{ job.status }}
#     text: Deployment to EC2 completed
#   if: always()

# Set timeout to prevent hanging
timeout-minutes: 15