name: Deploy to AWS EC2

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_PORT: ${{ secrets.DB_PORT }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Make zip file
        run: zip -r ./deploy.zip .
        shell: bash

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3
        run: aws s3 cp --region ${{ secrets.AWS_REGION }} ./deploy.zip s3://${{ secrets.S3_BUCKET_NAME }}/

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          envs: |
            DB_HOST
            DB_NAME
            DB_USERNAME
            DB_PASSWORD
            DB_PORT
          script: |
            cd /opt
            sudo rm -rf ./youtube
            sudo mkdir -p youtube
            cd youtube
            
            # S3에서 배포 파일 다운로드
            sudo aws s3 cp s3://${{ secrets.S3_BUCKET_NAME }}/deploy.zip .
            
            sudo unzip -o deploy.zip
            sudo chmod +x ./gradlew
            sudo ./gradlew clean build -x test
            
            echo "Copying JAR file..."
            sudo cp /opt/youtube/build/libs/*.jar /opt/youtube/youtube.jar
            sudo chown $(whoami):$(whoami) /opt/youtube/youtube.jar
            echo "JAR file copied successfully"
            
            # Create systemd service file
            echo "Creating systemd service file..."
            sudo tee /etc/systemd/system/youtube.service << EOF
  [Unit]
  Description=YouTube Application
  After=network.target
  
  [Service]
  Type=simple
  WorkingDirectory=/opt/youtube
  ExecStart=/usr/bin/java -jar /opt/youtube/youtube.jar
  User=$(whoami)
  Restart=on-failure
  RestartSec=10
  
  [Install]
  WantedBy=multi-user.target
  EOF
  
  echo "Reloading systemd daemon..."
  sudo systemctl daemon-reload
  
  echo "Starting service..."
  sudo systemctl restart youtube
  
  echo "Checking service status..."
  sleep 5
  sudo systemctl status youtube
  sudo journalctl -u youtube -n 50 --no-pager